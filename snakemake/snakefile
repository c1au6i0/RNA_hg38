SAMPLES = ["A"]

rule logs:
	input:
		expand("salmon/{sample}/quant.sf", sample=SAMPLES),
		"calls/all.vcf",
		expand("fusion/{sample}.arriba", sample=SAMPLES),
		expand("fusion/{sample}.star", sample=SAMPLES),
		expand("counts/{sample}_geneCounts.tab", sample=SAMPLES),
		expand("megadepth/{sample}/", sample=SAMPLES),
		expand("counts/{sample}_transcriptCounts.tab", sample=SAMPLES)

rule trimAndQualityCheck:
	input:
		fastq=expand("fastq/{sample}_{strand}.fq.gz",
		sample=SAMPLES, strand=["R1", "R2"])
	output:
		dir="trim/{sample}/"
	shell:
		"trim_galore --cores 4 --fastqc --illumina --dont_gzip --basename {wildcards.sample} -o {output} {input.fastq}"

rule star_index:
    input:
        fa="data/genome.fa",gtf="data/gtf.gtf"
    output:
        index="index/hg38/"
    shell:
        """
		STAR \
		--runMode genomeGenerate \
		--genomeDir {output} \
		--genomeFastaFiles {input.fa} \
		--sjdbOverhang 100 \
		--sjdbGTFfile {input.gtf} \
		--runThreadN 8
		"""

rule star_1pass:
    input:
        index="index/hg38/",
        fq=expand("trim/{sample}_{strand}.fq", sample=SAMPLES, strand=["R1", "R2"])
    output:
        dir="STAR/{sample}/",
        SJ="STAR/{sample}/{sample}_SJ.out.tab",
        wig="STAR/{sample}/{sample}_Signal.UniqueMultiple.str1.out.wig",
        bam1="STAR/{sample}/{sample}_Aligned.sortedByCoord.out.bam"
    shell:
        """
		--genomeDir {input.index} \
		--readFilesIn {input.fq} \
		--runThreadN 8 \
		--outFilterMultimapScoreRange 1 \
		--outFilterMultimapNmax 20 \
		--outFilterMismatchNmax 10 \
		--alignIntronMax 500000 \
		--alignMatesGapMax 1000000 \
		--sjdbScore 2 \
		--alignSJDBoverhangMin 5 \
		--genomeLoad NoSharedMemory \
		--outFilterMatchNminOverLread 0.33 \
		--outFilterScoreMinOverLread 0.33 \
		--sjdbOverhang 100 \
		--outSAMstrandField intronMotif \
		--outSAMtype BAM SortedByCoordinate \
		--outSAMmode None \
		--outWigType wiggle \
		--outWigStrand Unstranded \
		--outWigNorm None \
		--outFileNamePrefix {output.dir}/{wildcards.sample}
		"""

rule star_2pass:
    input:
        fq=expand("trim/{sample}_{strand}.fq", sample=SAMPLES, strand=["R1", "R2"]),
        index="index/hg38",
        SJ=expand("STAR/{sample}/{sample}_SJ.out.tab", sample=SAMPLES)
    output:
        dir="STAR/{sample}_2p/",
		bam2="STAR_2p/{sample}_Aligned.sortedByCoord.out.bam"
    shell:
        """
		--genomeDir {input.index} \
		--readFilesIn {input.fq} \
		--runThreadN 8 \
		--outFilterMultimapScoreRange 1 \
		--outFilterMultimapNmax 20 \
		--outFilterMismatchNmax 10 \
		--alignIntronMax 500000 \
		--alignMatesGapMax 1000000 \
		--sjdbScore 2 \
		--alignSJDBoverhangMin 5 \
		--genomeLoad NoSharedMemory \
		--sjdbFileChrStartEnd {input.SJ} \
		--outFilterMatchNminOverLread 0.33 \
		--outFilterScoreMinOverLread 0.33 \
		--sjdbOverhang 100 \
		--outSAMstrandField intronMotif \
		--outSAMtype BAM SortedByCoordinate \
		--outSAMmode None \
		--outFileNamePrefix {output.dir}/{wildcards.sample}_2pass
		"""

rule salmon_index:
    input:
        fa="data/transcripts.fa",
        decoy="data/decoys.txt"
    output:
        "index/salmon_hg38/"
    shell:
        "salmon index -t {input.fa} -i {output} --decoys {input.decoy} -k 31"

rule salmon_quant:
    input:
        idx="index/salmon_hg38/",
        fq=expand("trim/{sample}_{strand}.fq", sample=SAMPLES, strand=["R1", "R2"])
    output:
        dir="salmon/{sample}/",
        tc="salmon/{sample}/quant.sf"
    shell:
        "salmon quant -i {input.idx} -l A -1 {input.fq[0]} -2 {input.fq[1]} --validateMappings -o {output.dir}"

rule featureCounts:
    input:
        bam2=expand("STAR_2p/{sample}_Aligned.sortedByCoord.out.bam", sample=SAMPLES)
    output:
        gene="counts/{sample}_geneCounts.tab",exon="counts/{sample}_exonCounts.tab"
    script:
        "scripts/featurecounts.R"

rule TxImport:
    input:
        expand("salmon/{sample}/quant.sf", sample=SAMPLES)
    output:
        gene="counts/{sample}_geneCounts_salmon.tab",transcript="counts/{sample}_transcriptCounts.tab"
    script:
        "scripts/txImport.R"

rule arriba:
    input:
        bam2=expand("STAR_2p/{sample}_Aligned.sortedByCoord.out.bam", sample=SAMPLES)
    output:
        fusion="fusion/{sample}.arriba"
    shell:
        "arriba {input}"

rule STARfusion:
    input:
        bam2=expand("STAR_2p/{sample}_Aligned.sortedByCoord.out.bam", sample=SAMPLES)
    output:
        fusion="fusion/{sample}.star"
    shell:
        "STARfusion {input}"


rule bcftools_call:
    input:
        fa="data/genome.fa",
        bam=expand("STAR_2p/{sample}_Aligned.sortedByCoord.out.bam", sample=SAMPLES),
    output:
        vcf="calls/all.vcf"
    shell:
        "samtools mpileup -g -f {input.fa} {input.bam} | "
        "bcftools call -mv - > {output}"

rule megadepth:
    input:
    	bed="data/pasites.bed",
        wig=expand("STAR/{sample}/{sample}_Signal.UniqueMultiple.str1.out.wig", sample=SAMPLES)
    output:
    	dir="megadepth/{sample}/",
        paQuant="paQuant/{sample}_paQuant.tab"
    shell:
        "megadepth {input.wig} --annotation {input.bed} --op sum > {output.dir}"