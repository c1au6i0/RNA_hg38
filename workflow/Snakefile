container: "docker://condaforge/mambaforge:4.10.1-0"
import pandas as pd
configfile: "config/config.yaml"

df = (
    pd.read_csv(config["samples"], sep="\t", dtype={"sample_name": str, "unit_name": str})
    .set_index(["sample_name", "unit_name"], drop=False)
    .sort_index()
)

SAMPLES=df.sample_name.unique()
samples_trim=df.sample_name
unit_trim=df.unit_name

rule all:
    input:
        "results/qc/featureCounts_gene_gencode.html",
        "results/qc/featureCounts_gene_fc.html",
        "results/qc/featureCounts_exon_gencode.html",
        "results/qc/featureCounts_exon_fc.html",
        "results/qc/salmon.html",
        "results/qc/reads_qc.html",
        "results/qc/bam_qc.html",
        "results/tarfiles/metrics.tar.gz",
        expand("results/tarfiles/{sample}.tar.gz", sample=SAMPLES),
        expand("results/counts/featureCounts/{sample}_geneCounts_gencode.tsv", sample=SAMPLES),
        expand("results/counts/salmon/{sample}_geneCounts.tsv", sample=SAMPLES),
        expand("results/paQuant/{sample}_paQuant.tsv.gz", sample=SAMPLES),
        expand("results/fusion/arriba/{sample}.tsv", sample=SAMPLES),
        expand("results/variantCalling/vcf_filtered/{sample}.vcf.gz", sample=SAMPLES),
        expand("results/fusion/STAR_fusion/{sample}/star-fusion.fusion_predictions.tsv", sample=SAMPLES),
        "resources/GRCh37_gencode_v19_CTAT_lib_Mar012021.plug-n-play/ctat_genome_lib_build_dir/ref_genome.fa"
    output:
        complete="results/COMPLETED"
    shell:
        "touch {output.complete}"


if config["library_type"] == "PE":
    include:"rules/PE/inputFunctions.smk"
    include:"rules/downloads.smk"
    include:"rules/PE/RNASeq.smk"
    include:"rules/PE/variantCalling.smk"
    include:"rules/PE/QC.smk"
else:
    include:"rules/SE/inputFunctions.smk"
    include:"rules/downloads.smk"
    include:"rules/SE/RNASeq.smk"
    include:"rules/SE/variantCalling.smk"
    include:"rules/SE/QC.smk"

rule aggregate_outputs:
    input:
        featC_gene_counts_gc="results/counts/featureCounts/{sample}_geneCounts_gencode.tsv",
        featC_gene_counts_fc="results/counts/featureCounts/{sample}_geneCounts_fc.tsv",
        featC_exon_counts_gc="results/counts/featureCounts/{sample}_exonCounts_gencode.tsv",
        featC_exon_counts_fc="results/counts/featureCounts/{sample}_geneCounts_fc.tsv",
        salmon_gene_counts="results/counts/salmon/{sample}_geneCounts.tsv",
        salmon_gene_counts_scaled="results/counts/salmon/{sample}_geneCounts_scaled.tsv",
        salmon_trascript_counts="results/counts/salmon/{sample}_transcriptCounts.tsv",
        salmon_trascript_TPM="results/counts/salmon/{sample}_transcriptTPM.tsv",
        arriba="results/fusion/arriba/{sample}.tsv",
        STARfusion="results/fusion/STAR_fusion/{sample}/star-fusion.fusion_predictions.tsv",
        PAcounts="results/paQuant/{sample}_paQuant.tsv.gz",
        SJcounts=gather_SJ,
        vc="results/variantCalling/vcf_filtered/{sample}.vcf.gz"
    output:
        tarfile="results/tarfiles/{sample}.tar.gz"
    resources:
        mem_mb=config["mem_qc"],
        runtime_min=config["rt_qc"]
    log:
        "logs/{sample}_aggregate.log",
    conda:
        "../../envs/RNAseq.yaml"
    shell:
        "tar -czvf {output.tarfile} {input}"

rule aggregate_metrics:
    input:
        geneCount_gc="results/qc/featureCounts_gene_gencode.html",
        geneCount_fc="results/qc/featureCounts_gene_fc.html",
        exonCount_gc="results/qc/featureCounts_exon_gencode.html",
        exonCount_fc="results/qc/featureCounts_exon_fc.html",
        salmon="results/qc/salmon.html",
        reads_qc="results/qc/reads_qc.html",
        bam_qc="results/qc/bam_qc.html",
        bam_stat="results/qc/bam_qc_data/multiqc_rseqc_bam_stat.txt",
        bam_infer_exp="results/qc/bam_qc_data/multiqc_infer_experiment.txt",
        bam_read_distribution="results/qc/bam_qc_data/multiqc_rseqc_read_distribution.txt",
        star_stat="results/qc/bam_qc_data/multiqc_star.txt",
        reads_dup="results/qc/reads_qc_data/mqc_fastqc_sequence_counts_plot_1.txt",
        reads_dup_distribution="results/qc/reads_qc_data/mqc_fastqc_sequence_duplication_levels_plot_1.txt",
        reads_length_distribution="results/qc/reads_qc_data/mqc_fastqc_sequence_length_distribution_plot_1.txt",
        reads_quality_scores="results/qc/reads_qc_data/mqc_fastqc_per_sequence_quality_scores_plot_1.txt",
        reads_qc_distribution="results/qc/reads_qc_data/mqc_fastqc_per_sequence_gc_content_plot_Percentages.txt",
        salmon_stat="results/qc/salmon_data/multiqc_salmon.txt"
    output:
        tarfile="results/tarfiles/metrics.tar.gz",
        map_gene_gc_stat="results/qc/featureCounts_gene_gencode_data/featureCounts_gene_gencode.txt",
        map_gene_fc_stat="results/qc/featureCounts_gene_fc_data/featureCounts_gene_fc.txt",
        map_exon_gc_stat="results/qc/featureCounts_exon_gencode_data/featureCounts_exon_gencode.txt",
        map_exon_fc_stat="results/qc/featureCounts_exon_fc_data/featureCounts_exon_fc.txt"
    params:
        map_gene_gc_stat="results/qc/featureCounts_gene_gencode_data/multiqc_featureCounts.txt",
        map_gene_fc_stat="results/qc/featureCounts_gene_fc_data/multiqc_featureCounts.txt",
        map_exon_gc_stat="results/qc/featureCounts_exon_gencode_data/multiqc_featureCounts.txt",
        map_exon_fc_stat="results/qc/featureCounts_exon_fc_data/multiqc_featureCounts.txt"
    resources:
        mem_mb=config["mem_qc"],
        runtime_min=config["rt_qc"]
    log:
        "logs/samples_qc.log",
    conda:
        "../../envs/RNAseq.yaml"
    shell:
        """
        set -e
        mv {params.map_gene_gc_stat} {output.map_gene_gc_stat}
        mv {params.map_gene_gf_stat} {output.map_gene_fc_stat}
        mv {params.map_exon_gc_stat} {output.map_exon_gc_stat}
        mv {params.map_exon_fc_stat} {output.map_exon_fc_stat}
        tar -czvf {output.tarfile} {input} {output.map_gene_gc_stat} {output.map_gene_fc_stat} {output.map_exon_gc_stat} {output.map_exon_fc_stat}
        """